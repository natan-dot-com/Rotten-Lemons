\i triggers/permissao_ban.sql
\i triggers/album_circular.sql
\i triggers/permissao_remover.sql
\i triggers/bloqueia_banidos.sql
\i triggers/tag_remover_consistente.sql
\i triggers/classifica_por_tag_removida.sql

CREATE TABLE USUARIO (
    NOME_USUARIO    VARCHAR(50),
    EH_CRITICO      BOOLEAN     NOT NULL,
    EMAIL           VARCHAR(70) NOT NULL,
    DATA_NASCIMENTO DATE        NOT NULL,
    CARGO           CHAR(1)     NOT NULL    DEFAULT 'U',

    CONSTRAINT PK_USUARIO PRIMARY KEY (NOME_USUARIO),
    CONSTRAINT UN_USUARIO UNIQUE (EMAIL),
    CONSTRAINT CK_EMAIL_USUARIO CHECK(EMAIL ~ '^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$'),
    CONSTRAINT CK_CARGO_USUARIO CHECK(UPPER(CARGO) IN ('U', 'M', 'A'))
);

CREATE TABLE SEGUE (
    NOME_USUARIO                VARCHAR(50),
    NOME_USUARIO_SEGUIDO        VARCHAR(50),

    CONSTRAINT PK_SEGUE PRIMARY KEY (NOME_USUARIO, NOME_USUARIO_SEGUIDO),
    CONSTRAINT FK1_SEGUE FOREIGN KEY (NOME_USUARIO) REFERENCES 
        USUARIO (NOME_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_SEGUE FOREIGN KEY (NOME_USUARIO_SEGUIDO) REFERENCES 
        USUARIO (NOME_USUARIO) ON DELETE CASCADE,
    CONSTRAINT CK_SEGUE CHECK(UPPER(NOME_USUARIO_SEGUIDO) <> UPPER(NOME_USUARIO))
);

CREATE TRIGGER BLOQUEIA_BANIDOS_SEGUIR  
    BEFORE INSERT ON SEGUE
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();

CREATE TABLE BANIDO_POR (
    USUARIO_BANIDO  VARCHAR(50),
    MODERADOR       VARCHAR(50),
    DATA_BANIMENTO  DATE            DEFAULT NOW(),
    MOTIVO          VARCHAR(100),

    CONSTRAINT PK_BANIDOPOR PRIMARY KEY (USUARIO_BANIDO),
    CONSTRAINT FK1_BANIDOPOR FOREIGN KEY (USUARIO_BANIDO) REFERENCES 
        USUARIO (NOME_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_BANIDOPOR FOREIGN KEY (MODERADOR) REFERENCES 
        USUARIO (NOME_USUARIO) ON DELETE CASCADE
);

CREATE TRIGGER PERMISSAO_BANIMENTO  
    BEFORE INSERT ON BANIDO_POR
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_PERMISSAO_BAN();

-- tratar em aplicação a inserção casada de COMENTARIO em suas subtabelas
CREATE TABLE COMENTARIO (
    ID_COMENTARIO   INTEGER         GENERATED ALWAYS AS IDENTITY,
    NOME_USUARIO    VARCHAR(50)     NOT NULL,
    DATA_PUBL       TIMESTAMP       NOT NULL    DEFAULT NOW(),
    CONTEUDO        VARCHAR(300)    NOT NULL,
    TIPO            VARCHAR(7)      NOT NULL,

    CONSTRAINT PK_COMENTARIO PRIMARY KEY (ID_COMENTARIO),
    CONSTRAINT UN_COMENTARIO UNIQUE (NOME_USUARIO, DATA_PUBL),
    CONSTRAINT FK_COMENTARIO FOREIGN KEY (NOME_USUARIO) REFERENCES
        USUARIO (NOME_USUARIO) ON DELETE CASCADE,
    CONSTRAINT CK_COMENTARIO CHECK(UPPER(TIPO) IN ('ARTISTA', 'ALBUM', 'MUSICA'))
);

CREATE TRIGGER BLOQUEIA_BANIDOS_COMENTARIO
    BEFORE INSERT ON COMENTARIO
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();

CREATE TABLE COMENTARIO_REMOVIDO (
    ID_COMENTARIO      INTEGER,
    NOME_USUARIO       VARCHAR(50),

    CONSTRAINT PK_COMENTARIOREMOVIDO PRIMARY KEY (ID_COMENTARIO),
    CONSTRAINT FK1_COMENTARIOREMOVIDO FOREIGN KEY (ID_COMENTARIO) REFERENCES
        COMENTARIO (ID_COMENTARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_COMENTARIOREMOVIDO FOREIGN KEY (NOME_USUARIO) REFERENCES
        USUARIO (NOME_USUARIO) ON DELETE CASCADE
);

CREATE TRIGGER BLOQUEIA_BANIDOS_COMENTARIO_REMOVIDO
    BEFORE INSERT ON COMENTARIO_REMOVIDO
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();

CREATE TRIGGER PERMISSAO_REMOVER_COMENTARIO
    BEFORE INSERT ON COMENTARIO_REMOVIDO
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_PERMISSAO_REMOVER_COMENTARIO();

CREATE TABLE TAG (
    NOME_TAG    VARCHAR(30),

    CONSTRAINT PK_TAG PRIMARY KEY (NOME_TAG)
);

-- tratar a nivel de aplicacao para nao deixar gerar playlists vazias
-- sem nenhuma musica
CREATE TABLE PLAYLIST (
    ID_PLAYLIST     INTEGER         GENERATED ALWAYS AS IDENTITY,
    DATA_CRIACAO    DATE            NOT NULL,
    TAG_PLAYLIST    VARCHAR(30)     NOT NULL,

    CONSTRAINT PK_PLAYLIST PRIMARY KEY (ID_PLAYLIST),
    CONSTRAINT UN_PLAYLIST UNIQUE(DATA_CRIACAO, TAG_PLAYLIST),
    CONSTRAINT FK_PLAYLIST FOREIGN KEY (TAG_PLAYLIST) REFERENCES
        TAG (NOME_TAG) ON DELETE CASCADE --rever
);

CREATE TABLE ARTISTA (
    NOME_ARTISTA    VARCHAR(100)    NOT NULL,
    GENERO_MUSICAL  VARCHAR(30),

    CONSTRAINT PK_ARTISTA PRIMARY KEY (NOME_ARTISTA)
);

CREATE TABLE COMENTARIO_ARTISTA (
    ID_COMENTARIO       INTEGER,
    ARTISTA_COMENTARIO  VARCHAR(100)    NOT NULL,

    CONSTRAINT PK_COMENTARIOARTISTA PRIMARY KEY (ID_COMENTARIO),
    CONSTRAINT FK1_COMENTARIOARTISTA FOREIGN KEY (ID_COMENTARIO) REFERENCES
        COMENTARIO (ID_COMENTARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_COMENTARIOARTISTA FOREIGN KEY (ARTISTA_COMENTARIO) REFERENCES
        ARTISTA (NOME_ARTISTA) ON DELETE CASCADE
);

CREATE TABLE ALBUM (
    ID_ALBUM    INTEGER         GENERATED ALWAYS AS IDENTITY,
    NOME_ALBUM  VARCHAR(70)     NOT NULL,
    ARTISTA     VARCHAR(100)    NOT NULL,

    CONSTRAINT PK_ALBUM PRIMARY KEY (ID_ALBUM),
    CONSTRAINT UN_ALBUM UNIQUE(NOME_ALBUM, ARTISTA),
    CONSTRAINT FK_ALBUM FOREIGN KEY (ARTISTA) REFERENCES
        ARTISTA (NOME_ARTISTA) ON DELETE CASCADE
);

CREATE TABLE PARTICIPA_ALBUM (
    ID_ALBUM        INTEGER,
    PARTICIPANTE    VARCHAR(100),

    CONSTRAINT PK_PARTICIPAALBUM PRIMARY KEY (ID_ALBUM, PARTICIPANTE),
    CONSTRAINT FK1_PARTICIPAALBUM FOREIGN KEY (ID_ALBUM) REFERENCES
        ALBUM (ID_ALBUM) ON DELETE CASCADE,
    CONSTRAINT FK2_PARTICIPAALBUM FOREIGN KEY (PARTICIPANTE) REFERENCES
        ARTISTA (NOME_ARTISTA) ON DELETE CASCADE --rever
);

CREATE TRIGGER ALBUM_CIRCULAR
    BEFORE INSERT ON PARTICIPA_ALBUM
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_ALBUM_CIRCULAR();

CREATE TABLE COMENTARIO_ALBUM (
    ID_COMENTARIO   INTEGER,
    ID_ALBUM        INTEGER     NOT NULL,

    CONSTRAINT PK_COMENTARIOALBUM PRIMARY KEY (ID_COMENTARIO),
    CONSTRAINT FK1_COMENTARIOALBUM FOREIGN KEY (ID_COMENTARIO) REFERENCES
        COMENTARIO (ID_COMENTARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_COMENTARIOALBUM FOREIGN KEY (ID_ALBUM) REFERENCES
        ALBUM (ID_ALBUM) ON DELETE CASCADE
);

CREATE TABLE MUSICA (
    ID_MUSICA   INTEGER         GENERATED ALWAYS AS IDENTITY,
    NOME_MUSICA VARCHAR(70)     NOT NULL,
    ALBUM       INTEGER         NOT NULL,
    DURACAO     INTEGER,

    CONSTRAINT PK_MUSICA PRIMARY KEY (ID_MUSICA),
    CONSTRAINT FK_MUSICA FOREIGN KEY (ALBUM) REFERENCES
        ALBUM (ID_ALBUM) ON DELETE CASCADE,
    CONSTRAINT CK_MUSICA CHECK(DURACAO > 0)
);

CREATE TABLE COMENTARIO_MUSICA (
    ID_COMENTARIO   INTEGER,
    ID_MUSICA       INTEGER     NOT NULL,

    CONSTRAINT PK_COMENTARIOMUSICA PRIMARY KEY (ID_COMENTARIO),
    CONSTRAINT FK_COMENTARIOMUSICA FOREIGN KEY (ID_MUSICA) REFERENCES
        MUSICA (ID_MUSICA) ON DELETE CASCADE
);

CREATE TABLE CLASSIFICA_POR (
    ID_MUSICA       INTEGER,
    TAG             VARCHAR(30),
    NOME_USUARIO    VARCHAR(50),

    CONSTRAINT PK_CLASSIFICAPOR PRIMARY KEY (ID_MUSICA, TAG, NOME_USUARIO),
    CONSTRAINT FK1_CLASSIFICAPOR FOREIGN KEY (ID_MUSICA) REFERENCES
        MUSICA (ID_MUSICA) ON DELETE CASCADE,
    CONSTRAINT FK2_CLASSIFICAPOR FOREIGN KEY (TAG) REFERENCES
        TAG (NOME_TAG) ON DELETE CASCADE,
    CONSTRAINT FK3_CLASSIFICAPOR FOREIGN KEY (NOME_USUARIO) REFERENCES
        USUARIO (NOME_USUARIO) ON DELETE CASCADE
);

CREATE TRIGGER BLOQUEIA_BANIDOS_CLASSIFICAPOR
    BEFORE INSERT ON CLASSIFICA_POR
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();

CREATE TRIGGER CLASSIFICA_POR_TAG_REMOVIDA
    BEFORE INSERT ON CLASSIFICA_POR
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_CLASSIFICA_POR_TAG_REMOVIDA();

CREATE TABLE TAG_REMOVIDA (
    TAG             VARCHAR(30),
    NOME_USUARIO    VARCHAR(50),
    MUSICA          INTEGER,

    CONSTRAINT PK_TAGREMOVIDA PRIMARY KEY (TAG, MUSICA),
    CONSTRAINT FK1_TAGREMOVIDA FOREIGN KEY (TAG) REFERENCES
        TAG (NOME_TAG) ON DELETE CASCADE,
    CONSTRAINT FK2_TAGREMOVIDA FOREIGN KEY (NOME_USUARIO) 
        REFERENCES USUARIO (NOME_USUARIO) ON DELETE CASCADE, -- rever
    CONSTRAINT FK3_TAGREMOVIDA FOREIGN KEY (MUSICA) REFERENCES
        MUSICA (ID_MUSICA) ON DELETE CASCADE
);

CREATE TRIGGER BLOQUEIA_BANIDOS_TAGREMOVIDA
    BEFORE INSERT ON TAG_REMOVIDA
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();

CREATE TRIGGER TAG_REMOVER_CONSISTENTE
    BEFORE INSERT ON TAG_REMOVIDA
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_TAG_REMOVER_CONSISTENTE();

CREATE TRIGGER TAG_REMOVER_PERMISSAO
    BEFORE INSERT ON TAG_REMOVIDA
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_TAG_REMOVER_PERMISSAO();

CREATE TABLE PLAYLIST_CONTEM (
    ID_MUSICA       INTEGER,
    ID_PLAYLIST     INTEGER,

    CONSTRAINT PK_PLAYLISTCONTEM PRIMARY KEY (ID_MUSICA, ID_PLAYLIST),
    CONSTRAINT FK1_PLAYLISTCONTEM FOREIGN KEY (ID_MUSICA) REFERENCES
        MUSICA (ID_MUSICA) ON DELETE CASCADE,
    CONSTRAINT FK2_PLAYLISTCONTEM FOREIGN KEY (ID_PLAYLIST) REFERENCES
        PLAYLIST (ID_PLAYLIST) ON DELETE CASCADE
);

CREATE TABLE CURTE (
    NOME_USUARIO    VARCHAR(50),
    ID_PLAYLIST     INTEGER,

    CONSTRAINT PK_CURTE PRIMARY KEY (NOME_USUARIO, ID_PLAYLIST),
    CONSTRAINT FK1_CURTE FOREIGN KEY (NOME_USUARIO) REFERENCES
        USUARIO (NOME_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_CURTE FOREIGN KEY (ID_PLAYLIST) REFERENCES
        PLAYLIST (ID_PLAYLIST) ON DELETE CASCADE
);

CREATE TRIGGER BLOQUEIA_BANIDOS_CURTE
    BEFORE INSERT ON CURTE
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();

-- as avaliacoes sao apenas para musicas, tratar em aplicacao se houver
-- existencia de notas para albuns e artistas (media da hierarquia inferior)
CREATE TABLE AVALIA (
    NOME_USUARIO    VARCHAR(50),
    ID_MUSICA       INTEGER,
    ESTRELAS        INTEGER     NOT NULL,

    CONSTRAINT PK_AVALIA PRIMARY KEY (NOME_USUARIO, ID_MUSICA),
    CONSTRAINT FK1_CURTE FOREIGN KEY (NOME_USUARIO) REFERENCES
        USUARIO (NOME_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_AVALIA FOREIGN KEY (ID_MUSICA) REFERENCES
        MUSICA (ID_MUSICA) ON DELETE CASCADE,
    CONSTRAINT CK_AVALIA CHECK(ESTRELAS >= 0 AND ESTRELAS <= 5)
);

CREATE TRIGGER BLOQUEIA_BANIDOS_AVALIA
    BEFORE INSERT ON AVALIA
    FOR EACH ROW EXECUTE PROCEDURE TRIGGER_BLOQUEIA_BANIDOS();
